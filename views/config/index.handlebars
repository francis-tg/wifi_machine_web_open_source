<style>
        .step-content {
            display: none;
        }

        .step-content.active {
            display: block;
        }
        .step-btns{
            display: flex;
            justify-content: flex-end;
        }
    </style>
    
    <div class="container mt-5">
        <div class="row">
            <div class="col">
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0"
                        aria-valuemax="100"></div>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col">
                <div class="step-content active">
                    <h3>Etape 1: Créer un compte</h3>
                    {{>config/addUser}}
                   <div class="step-btns">
                    <button class="btn btn-primary next-step">Commençons</button>
                   </div>
                </div>
                <div class="step-content">
                    <h3>Etape 2: Configurer l'équipement réseau</h3>
                    {{>config/network}}
                    <div class="step-btns">
                        <button class="btn btn-primary prev-step">Précédant</button>
                        <button class="btn btn-primary next-step">Suivant</button>
                    </div>
                </div>
                <div class="step-content">
                    <h3>Etape 3: Ajouter les informations de connection de votre Mikrotik</h3>
                    {{>config/mikrotik}}
                    <div class="step-btns">
                        <button class="btn btn-primary prev-step">Précédant</button>
                        <button class="btn btn-primary next-step">Suivant</button>
                    </div>
                </div>
                
                <div class="step-content">
                    <h3>Etape 4: Informations du Tickets</h3>
                    {{>config/ticketInfo}}
                    <div class="step-btns">
                        <button class="btn btn-primary prev-step">Précédant</button>
                        <button class="btn btn-primary next-step">Suivant</button>
                    </div>
                   
                </div>
                <div class="step-content">
                    <h3>Etape 3: Créer vos forfait</h3>
                    {{>config/timeAdd}}
                <div class="step-btns">
                    <button class="btn btn-primary prev-step">Précédant</button>
                    <button class="btn btn-primary next-step">Terminer</button>
                </div>
                </div>
                {{!-- <div class="step-content">
                    <h3>Récapitulons</h3>
                    <div class="recap"></div>
                   <div class="step-btns">
                    <button class="btn btn-primary prev-step">Previous</button>
                    <button class="btn btn-primary next-step">Sauvegarder</button>
                   </div>
                </div> --}}
                {{!-- <div class="step-content">
                    <h3>Step 6</h3>
                    <p>This is the content of step 5.</p>
                    <button class="btn btn-primary prev-step">Previous</button>
                    <button class="btn btn-primary">Finish</button>
                </div> --}}
            </div>
        </div>
    </div>
<script src="/js/ip_validate.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const steps = document.querySelectorAll('.step-content');
        const progressBar = document.querySelector('.progress-bar');
        //const regex = /^(?:\d{1,3}\.){3}\d{1,3}\/([1-9]|[1-2][0-9]|3[0-2])$/;
        let currentStep = 0;
        const data = []
        let before = {}

        function showStep(stepIndex) {
            steps.forEach((step, index) => {
                if (index === stepIndex) {
                    step.classList.add('active');
                } else {
                    step.classList.remove('active');
                }
            });

            progressBar.style.width = ((stepIndex + 1) / steps.length) * 100 + '%';
        }

        function nextStep(e) {
            let dataFromInput = {}
            let multInput =[]
            const format = []
            const invalideInput = []
            const inputs = e.target.parentElement.parentElement.querySelectorAll("input")

            inputs.forEach(input=>{
                if(input.value !=="")
                {
                   input.style.borderColor="initial"
                    dataFromInput = { ...dataFromInput, [input.name]: regex.test(input.value) ? String(input.value).split("/")[0] : input.value }
                }else{
                     invalideInput.push(input)
                    
                   
                }
            })
            if(invalideInput.length===0){
                before[e.target.parentElement.parentElement.querySelector("form").getAttribute("data-set")] = dataFromInput
                
                data.push(before)
                if (currentStep === steps.length - 1) {
                    console.log(window.MultiInput)
                    Array.from(window.MultiInput,(mInputs) => {
                        let prepData = {}
                        mInputs.querySelectorAll("input").forEach((mInput) => {
                            prepData = {...prepData, [mInput.name]: mInput.value }
                        })
                        multInput.push(prepData);
                    })
                    before["forfait"] = multInput
                    console.log(before)
                    e.target.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                         <span class="visually-hidden">Patienter...</span`
                    fetch('/config/add', {
                         method: "POST",
                         headers: {
                             "Content-Type": "application/json"
                         },
                         body: JSON.stringify(before),
                         redirect: "follow"
                     }).then((r)=>{
                        if(r.status ===200){
                            location.href = "/users/login"
                        }
                     })
                }
                if (currentStep < steps.length - 1) {
                    currentStep++;
                    showStep(currentStep);
                }
            }else{
                invalideInput.forEach(inv=> inv.style.borderColor = "red")
            }
            
        }

        function previousStep() {
            if (currentStep > 0) {
                currentStep--;
                showStep(currentStep);
            }
        }

        const nextButtons = document.querySelectorAll('.next-step');
        const prevButtons = document.querySelectorAll('.prev-step');

        nextButtons.forEach(button => {
            button.addEventListener('click', nextStep);
        });

        prevButtons.forEach(button => {
  
            button.addEventListener('click', previousStep);
        });

        function sendConfig(){
            //setTimeout(()=>{
                fetch('/config/add', {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data),
                    redirect: "follow"
                })
            //},5400)
        }
    </script>
